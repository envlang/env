using System;

// This file was generated by Generator.cs

namespace Ast {

  /* To match against an instance of Expr, write:
     x.Match(
       Int: value => throw new NotImplementedYetException(),,
       String: value => throw new NotImplementedYetException(),
     )
  */
  public abstract class Expr {
    public abstract T Match_<T>(Visitor<T> c);
    public static Expr Int(int value) => new Int(value);
    public static Expr String(string value) => new String(value);
    public virtual Immutable.Option<Int> AsInt() => Immutable.Option.None<Int>();
    public virtual Immutable.Option<String> AsString() => Immutable.Option.None<String>();
    private string GetTag() {
      return this.Match(
        Int: value => "Int",
        String: value => "String"
      );
    }
  }

  public partial class Visitor<T> { public Func<int, T> Int { get; set; } }

  public sealed class Int : Expr {
    public readonly int value;
    public Int(int value) { this.value = value; }
    public override T Match_<T>(Visitor<T> c) => c.Int(value);
    public override Immutable.Option<Int> AsInt() => Immutable.Option.Some<Int>(this);
    public override bool Equals(object other) {
      var cast = other as Int;
      if (Object.ReferenceEquals(cast, null)) {
        return false;
      } else {
        return Equality.Field<Int, int>(this, cast, x => x.value, (x, y) => ((Object)x).Equals(y));
      }
    }
    public override int GetHashCode() {
        return HashCode.Combine("Int", this.value);
    }

    public override string ToString() => "Int";
  }

  public partial class Visitor<T> { public Func<string, T> String { get; set; } }

  public sealed class String : Expr {
    public readonly string value;
    public String(string value) { this.value = value; }
    public override T Match_<T>(Visitor<T> c) => c.String(value);
    public override Immutable.Option<String> AsString() => Immutable.Option.Some<String>(this);
    public override bool Equals(object other) {
      var cast = other as String;
      if (Object.ReferenceEquals(cast, null)) {
        return false;
      } else {
        return Equality.Field<String, string>(this, cast, x => x.value, (x, y) => ((Object)x).Equals(y));
      }
    }
    public override int GetHashCode() {
        return HashCode.Combine("String", this.value);
    }

    public override string ToString() => "String";
  }

}
public static class ExprExtensionMethods {
  public static T Match<T>(
      this Ast.Expr e,
      Func<int, T> Int,
      Func<string, T> String
    ) {
    return e.Match_(new Ast.Visitor<T> {
      Int = Int,
      String = String
    });
  }
}
